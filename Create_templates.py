# Create_templates.py - T·∫°o file HTML template cho ·ª©ng d·ª•ng web (V·ªõi logic AI ·ªü Frontend)

import os # Th∆∞ vi·ªán ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi h·ªá ƒëi·ªÅu h√†nh, v√≠ d·ª•: t·∫°o th∆∞ m·ª•c

def create_html_template():
    """
    T·∫°o file HTML template ch√≠nh cho ·ª©ng d·ª•ng d·ª± ƒëo√°n l∆∞∆°ng.
    Template n√†y s·ª≠ d·ª•ng Tailwind CSS ƒë·ªÉ t·ªëi ∆∞u h√≥a thi·∫øt k·∫ø responsive,
    v√† ch·ª©a logic JavaScript ƒë·ªÉ g·ªçi c·∫£ backend ML v√† API AI Gemini.
    """
    html_content = '''<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D·ª± ƒêo√°n L∆∞∆°ng Nh√¢n Vi√™n (AI Enhanced)</title>
    <!-- T·∫£i Tailwind CSS t·ª´ CDN ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªõp ti·ªán √≠ch -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Thi·∫øt l·∫≠p c·∫•u h√¨nh Tailwind ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªõp m·∫∑c ƒë·ªãnh -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'], // S·ª≠ d·ª•ng font Inter ho·∫∑c sans-serif m·∫∑c ƒë·ªãnh
                    },
                }
            }
        }
    </script>
</head>
<body class="bg-gradient-to-br from-indigo-500 to-purple-600 min-h-screen p-4 flex items-center justify-center font-sans">
    <div class="container bg-white rounded-xl shadow-2xl overflow-hidden max-w-3xl w-full mx-auto my-8">
        <div class="header bg-gradient-to-br from-gray-800 to-blue-500 text-white p-8 text-center rounded-t-xl">
            <h1 class="text-4xl font-bold mb-2">üéØ D·ª± ƒêo√°n L∆∞∆°ng Nh√¢n Vi√™n</h1>
            <p class="opacity-90 text-lg">S·ª≠ d·ª•ng Machine Learning v√† AI ƒë·ªÉ d·ª± ƒëo√°n m·ª©c l∆∞∆°ng ph√π h·ª£p</p>
        </div>

        <div class="form-container p-8">
            <!-- Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh n·∫øu c√≥ d·ªØ li·ªáu hi·ªáu su·∫•t -->
            {% if performance %}
            <div class="model-info bg-blue-50 border-l-4 border-blue-500 text-gray-800 p-4 rounded-lg mb-6 shadow-sm">
                <h4 class="text-xl font-semibold text-gray-700 mb-3">üìä Th√¥ng tin m√¥ h√¨nh:</h4>
                <p class="text-gray-600 mb-1"><strong>Sai s·ªë tuy·ªát ƒë·ªëi trung b√¨nh (MAE):</strong> {{ "%.2f"|format(performance.mae) }} VND</p>
                <p class="text-gray-600"><strong>ƒê·ªô ch√≠nh x√°c (R¬≤):</strong> {{ "%.4f"|format(performance.r2) }}</p>
            </div>
            {% endif %}

            <form id="predictionForm" class="space-y-6">
                <!-- H√†ng 1 -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        <label for="experience" class="block text-gray-700 font-semibold mb-2 text-lg">üíº S·ªë nƒÉm kinh nghi·ªám (0-50):</label>
                        <input type="number" id="experience" name="experience" min="0" max="50" step="0.1" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm">
                    </div>

                    <div class="form-group">
                        <label for="education" class="block text-gray-700 font-semibold mb-2 text-lg">üéì Tr√¨nh ƒë·ªô h·ªçc v·∫•n:</label>
                        <select id="education" name="education" required
                                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm bg-white appearance-none">
                            {% for level in education_levels %}
                            <option value="{{ level }}">{{ level }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <!-- H√†ng 2 -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        <label for="position" class="block text-gray-700 font-semibold mb-2 text-lg">üë®‚Äçüíº Ch·ª©c v·ª•:</label>
                        <select id="position" name="position" required
                                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm bg-white appearance-none">
                            {% for pos in position_levels %}
                            <option value="{{ pos }}">{{ pos }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="contract_type" class="block text-gray-700 font-semibold mb-2 text-lg">üìÑ Lo·∫°i h·ª£p ƒë·ªìng:</label>
                        <select id="contract_type" name="contract_type" required
                                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm bg-white appearance-none">
                            {% for type in contract_types %}
                            <option value="{{ type }}">{{ type }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <!-- H√†ng 3 -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group">
                        <label for="work_area" class="block text-gray-700 font-semibold mb-2 text-lg">üìç Khu v·ª±c l√†m vi·ªác:</label>
                        <select id="work_area" name="work_area" required
                                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm bg-white appearance-none">
                            {% for area in work_areas %}
                            <option value="{{ area }}">{{ area }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="client_type" class="block text-gray-700 font-semibold mb-2 text-lg">üè¢ Lo·∫°i h√¨nh m·ª•c ti√™u:</label>
                        <select id="client_type" name="client_type" required
                                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm bg-white appearance-none">
                            {% for client in client_types %}
                            <option value="{{ client }}">{{ client }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <!-- H√†ng 4: Checkboxes v√† T·ª∑ l·ªá ph·ª• c·∫•p -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="form-group flex flex-col justify-around">
                        <div class="flex items-center space-x-3 mb-4">
                            <input type="checkbox" id="certificate" name="certificate" value="1"
                                   class="h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                            <label for="certificate" class="text-gray-700 font-medium text-lg">üìú C√≥ ch·ª©ng ch·ªâ ngh·ªÅ nghi·ªáp</label>
                        </div>
                        <div class="flex items-center space-x-3 mb-4">
                            <input type="checkbox" id="night_shift" name="night_shift" value="1"
                                   class="h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                            <label for="night_shift" class="text-gray-700 font-medium text-lg">üåô L√†m ca ƒë√™m</label>
                        </div>
                        <div class="flex items-center space-x-3">
                            <input type="checkbox" id="overtime" name="overtime" value="1"
                                   class="h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                            <label for="overtime" class="text-gray-700 font-medium text-lg">‚è∞ L√†m th√™m gi·ªù</label>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="flex items-center space-x-3 mb-4">
                            <input type="checkbox" id="special_skills" name="special_skills" value="1"
                                   class="h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500">
                            <label for="special_skills" class="text-gray-700 font-medium text-lg">ü•ã C√≥ k·ªπ nƒÉng ƒë·∫∑c th√π (V√µ thu·∫≠t, PCCC)</label>
                        </div>
                        <label for="allowances_percentage" class="block text-gray-700 font-semibold mb-2 text-lg">üí∞ T·ª∑ l·ªá ph·ª• c·∫•p/ph√∫c l·ª£i (%):</label>
                        <input type="number" id="allowances_percentage" name="allowances_percentage" min="0" max="30" step="0.1" value="0"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm">
                        <p class="text-sm text-gray-500 mt-1">Nh·∫≠p gi√° tr·ªã t·ª´ 0 ƒë·∫øn 30 (v√≠ d·ª•: 10 cho 10%)</p>
                    </div>
                </div>

                <!-- H√†ng AI Insight -->
                <div class="form-group">
                    <label for="ai_prompt" class="block text-gray-700 font-semibold mb-2 text-lg">üß† G·ª£i √Ω AI b·ªï sung (v√≠ d·ª•: "Nh√¢n vi√™n c√≥ nƒÉng l·ª±c t·ªët", "Th·ªã tr∆∞·ªùng ƒëang thi·∫øu nh√¢n s·ª±"):</label>
                    <textarea id="ai_prompt" name="ai_prompt" rows="3"
                              class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out shadow-sm"
                              placeholder="Nh·∫≠p c√°c y·∫øu t·ªë ƒë·∫∑c bi·ªát m√† b·∫°n mu·ªën AI xem x√©t..."></textarea>
                </div>
                
                <button type="submit" class="btn w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 ease-in-out transform hover:-translate-y-1 shadow-md hover:shadow-lg">
                    üîÆ D·ª± ƒêo√°n L∆∞∆°ng
                </button>
            </form>

            <!-- Khu v·ª±c hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i -->
            <div id="loading" class="loading hidden text-center p-6 bg-blue-50 rounded-lg mt-6 shadow-sm">
                <div class="spinner border-t-4 border-blue-500 border-solid rounded-full w-10 h-10 animate-spin mx-auto mb-3"></div>
                <p id="loadingMessage" class="text-blue-700 font-medium">ƒêang x·ª≠ l√Ω...</p>
            </div>

            <!-- Khu v·ª±c hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n ho·∫∑c l·ªói -->
            <div id="result" class="result hidden mt-6 p-6 rounded-lg border-l-4 border-green-500 bg-green-50 shadow-md">
                <h3 class="text-2xl font-bold text-green-700 mb-4">üí∞ K·∫øt Qu·∫£ D·ª± ƒêo√°n</h3>
                <div id="resultContent" class="space-y-3"></div>
            </div>
        </div>
    </div>

    <script>
        // H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
        const formatCurrency = (amount) => {
            return Number(amount).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        };

        // H√†m hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n th√†nh c√¥ng
        function displayResult(data) {
            const resultDiv = document.getElementById('result');
            const contentDiv = document.getElementById('resultContent');

            contentDiv.innerHTML = `
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Kinh nghi·ªám:</span>
                    <span class="font-medium text-green-800">${data.experience} nƒÉm</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Tr√¨nh ƒë·ªô:</span>
                    <span class="font-medium text-green-800">${data.education}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Ch·ª©ng ch·ªâ:</span>
                    <span class="font-medium text-green-800">${data.certificate ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Ca ƒë√™m:</span>
                    <span class="font-medium text-green-800">${data.night_shift ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ L√†m th√™m:</span>
                    <span class="font-medium text-green-800">${data.overtime ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Ch·ª©c v·ª•:</span>
                    <span class="font-medium text-green-800">${data.position}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Lo·∫°i h·ª£p ƒë·ªìng:</span>
                    <span class="font-medium text-green-800">${data.contract_type}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ K·ªπ nƒÉng ƒë·∫∑c th√π:</span>
                    <span class="font-medium text-green-800">${data.special_skills ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Khu v·ª±c l√†m vi·ªác:</span>
                    <span class="font-medium text-green-800">${data.work_area}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ Lo·∫°i h√¨nh m·ª•c ti√™u:</span>
                    <span class="font-medium text-green-800">${data.client_type}</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-green-200">
                    <span class="text-gray-700">üîπ T·ª∑ l·ªá ph·ª• c·∫•p/ph√∫c l·ª£i:</span>
                    <span class="font-medium text-green-800">${(data.allowances_percentage * 100).toFixed(1)}%</span>
                </div>
                <div class="flex justify-between items-center py-2 border-b border-purple-200">
                    <span class="text-gray-700 font-semibold">‚ú® ƒêi·ªÅu ch·ªânh AI:</span>
                    <span class="font-medium text-purple-700">${(data.ai_adjustment_percentage * 100).toFixed(1)}% (${data.ai_insight_text})</span>
                </div>
                <div class="flex justify-between items-center py-2 pt-4 text-lg font-bold text-green-700">
                    <span>üí∞ L∆∞∆°ng d·ª± ƒëo√°n/th√°ng:</span>
                    <span>${formatCurrency(data.predicted_salary)}</span>
                </div>
                <div class="flex justify-between items-center py-2 text-lg font-bold text-green-700">
                    <span>üí∞ L∆∞∆°ng d·ª± ƒëo√°n/nƒÉm:</span>
                    <span>${formatCurrency(data.predicted_salary_year)}</span>
                </div>
            `;

            resultDiv.classList.remove('hidden'); // Hi·ªÉn th·ªã kh·ªëi k·∫øt qu·∫£
            resultDiv.classList.remove('bg-red-50', 'border-red-500'); // ƒê·∫£m b·∫£o kh√¥ng c√≥ styling l·ªói
            resultDiv.classList.add('bg-green-50', 'border-green-500'); // Th√™m styling th√†nh c√¥ng
        }

        // H√†m hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        function displayError(error) {
            const resultDiv = document.getElementById('result');
            const contentDiv = document.getElementById('resultContent');

            contentDiv.innerHTML = `<p class="text-red-700 font-semibold text-lg"><strong>‚ùå L·ªói:</strong> ${error}</p>`;
            resultDiv.classList.remove('hidden'); // Hi·ªÉn th·ªã kh·ªëi k·∫øt qu·∫£ (v·ªõi n·ªôi dung l·ªói)
            resultDiv.classList.remove('bg-green-50', 'border-green-500'); // X√≥a styling th√†nh c√¥ng
            resultDiv.classList.add('bg-red-50', 'border-red-500'); // Th√™m styling l·ªói
        }

        document.getElementById('predictionForm').addEventListener('submit', async function(e) {
            e.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi g·ª≠i form m·∫∑c ƒë·ªãnh

            const formData = new FormData(this);
            const inputData = {
                experience: parseFloat(formData.get('experience')),
                education: formData.get('education'),
                certificate: formData.get('certificate') ? 1 : 0,
                night_shift: formData.get('night_shift') ? 1 : 0,
                overtime: formData.get('overtime') ? 1 : 0,
                position: formData.get('position'),
                contract_type: formData.get('contract_type'),
                special_skills: formData.get('special_skills') ? 1 : 0,
                work_area: formData.get('work_area'),
                client_type: formData.get('client_type'),
                allowances_percentage: parseFloat(formData.get('allowances_percentage')) / 100,
                ai_prompt: formData.get('ai_prompt') || '' // L·∫•y prompt AI ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng c√≥
            };

            // Hi·ªÉn th·ªã tr·∫°ng th√°i loading v√† ·∫©n k·∫øt qu·∫£/l·ªói tr∆∞·ªõc ƒë√≥
            const loadingDiv = document.getElementById('loading');
            const loadingMessage = document.getElementById('loadingMessage');
            loadingDiv.classList.remove('hidden');
            loadingMessage.textContent = 'ƒêang d·ª± ƒëo√°n l∆∞∆°ng c∆° b·∫£n...'; // Set initial loading message

            document.getElementById('result').classList.add('hidden');
            document.getElementById('result').classList.remove('error'); // X√≥a l·ªõp error n·∫øu c√≥

            let predicted_salary_ml_only;
            let ai_adjustment_percentage = 0;
            let ai_insight_text = "Kh√¥ng c√≥ g·ª£i √Ω AI n√†o ƒë∆∞·ª£c cung c·∫•p.";

            try {
                // B∆∞·ªõc 1: G·ª≠i y√™u c·∫ßu ƒë·∫øn Flask backend ƒë·ªÉ l·∫•y l∆∞∆°ng d·ª± ƒëo√°n c∆° b·∫£n (ch·ªâ ML)
                const ml_response = await fetch('/predict', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    // G·ª≠i t·∫•t c·∫£ c√°c d·ªØ li·ªáu ngo·∫°i tr·ª´ ai_prompt ƒë·∫øn backend ML
                    body: JSON.stringify({
                        experience: inputData.experience,
                        education: inputData.education,
                        certificate: inputData.certificate,
                        night_shift: inputData.night_shift,
                        overtime: inputData.overtime,
                        position: inputData.position,
                        contract_type: inputData.contract_type,
                        special_skills: inputData.special_skills,
                        work_area: inputData.work_area,
                        client_type: inputData.client_type,
                        allowances_percentage: inputData.allowances_percentage
                    })
                });
                const ml_result = await ml_response.json();

                if (!ml_response.ok || !ml_result.success) {
                    throw new Error(ml_result.error || 'L·ªói khi d·ª± ƒëo√°n l∆∞∆°ng c∆° b·∫£n t·ª´ ML.');
                }
                predicted_salary_ml_only = ml_result.data.predicted_salary;

                // B∆∞·ªõc 2: N·∫øu c√≥ ai_prompt, g·ªçi Gemini API ƒë·ªÉ l·∫•y ƒëi·ªÅu ch·ªânh AI
                if (inputData.ai_prompt.trim() !== '') {
                    loadingMessage.textContent = 'ƒêang ƒëi·ªÅu ch·ªânh l∆∞∆°ng b·∫±ng AI...'; // Update loading message for AI
                    const features_summary = `Kinh nghi·ªám: ${inputData.experience} nƒÉm, Tr√¨nh ƒë·ªô: ${inputData.education}, Ch·ª©ng ch·ªâ: ${inputData.certificate ? 'C√≥' : 'Kh√¥ng'}, Ca ƒë√™m: ${inputData.night_shift ? 'C√≥' : 'Kh√¥ng'}, L√†m th√™m: ${inputData.overtime ? 'C√≥' : 'Kh√¥ng'}, Ch·ª©c v·ª•: ${inputData.position}, Lo·∫°i Hƒê: ${inputData.contract_type}, K·ªπ nƒÉng ƒë·∫∑c th√π: ${inputData.special_skills ? 'C√≥' : 'Kh√¥ng'}, Khu v·ª±c: ${inputData.work_area}, Lo·∫°i m·ª•c ti√™u: ${inputData.client_type}, Ph·ª• c·∫•p: ${(inputData.allowances_percentage * 100).toFixed(1)}%`;
                    
                    const prompt_text = (
                        `D·ª±a tr√™n h·ªì s∆° nh√¢n vi√™n sau: ${features_summary}. ` +
                        `V√† y√™u c·∫ßu c·ª• th·ªÉ t·ª´ ng∆∞·ªùi d√πng: '${inputData.ai_prompt}'. ` +
                        `B·∫°n ƒë·ªÅ xu·∫•t m·ª©c l∆∞∆°ng d·ª± ƒëo√°n (${predicted_salary_ml_only} VND) n√™n ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh bao nhi√™u ph·∫ßn trƒÉm? ` +
                        `Ch·ªâ tr·∫£ l·ªùi b·∫±ng m·ªôt gi√° tr·ªã ph·∫ßn trƒÉm (v√≠ d·ª•: '+5%', '-2%', '0%'). ` +
                        `N·∫øu kh√¥ng c√≥ s·ª± ƒëi·ªÅu ch·ªânh r√µ r√†ng n√†o ƒë∆∞·ª£c ng·ª• √Ω, h√£y tr·∫£ l·ªùi b·∫±ng '0%'.` +
                        `V√≠ d·ª•: +7.5% ho·∫∑c -3% ho·∫∑c 0% k√®m theo l√Ω do ng·∫Øn g·ªçn.`
                    );

                    let chatHistory = [];
                    chatHistory.push({ role: "user", parts: [{ text: prompt_text }] });
                    const payload = { contents: chatHistory };
                    // *******************************************************************
                    // API KEY ƒê∆Ø·ª¢C TRUY·ªÄN T·ª™ FLASK SERVER QUA TEMPLATE
                    const apiKey = "{{ gemini_api_key }}";
                    // *******************************************************************
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    if (!apiKey || apiKey === 'YOUR_GEMINI_API_KEY_HERE') { // Ki·ªÉm tra n·∫øu API Key kh√¥ng h·ª£p l·ªá
                        throw new Error("API Key cho Gemini AI ch∆∞a ƒë∆∞·ª£c cung c·∫•p ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra file .env v√† kh·ªüi ƒë·ªông l·∫°i server.");
                    }

                    const ai_response = await fetch(apiUrl, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            });
                    const ai_result = await ai_response.json();

                    if (ai_result.candidates && ai_result.candidates.length > 0 &&
                        ai_result.candidates[0].content && ai_result.candidates[0].content.parts &&
                        ai_result.candidates[0].content.parts.length > 0) {
                        ai_insight_text = ai_result.candidates[0].content.parts[0].text;
                        // Tr√≠ch xu·∫•t ph·∫ßn trƒÉm t·ª´ ph·∫£n h·ªìi AI
                        const match = ai_insight_text.match(/([+-]?\d+\.?\d*)%/);
                        if (match) {
                            ai_adjustment_percentage = parseFloat(match[1]) / 100;
                        } else {
                            ai_adjustment_percentage = 0; // M·∫∑c ƒë·ªãnh kh√¥ng ƒëi·ªÅu ch·ªânh n·∫øu kh√¥ng t√¨m th·∫•y %
                            ai_insight_text = "AI kh√¥ng ƒë∆∞a ra ƒëi·ªÅu ch·ªânh r√µ r√†ng t·ª´ ph·∫£n h·ªìi: " + (ai_insight_text.length > 100 ? ai_insight_text.substring(0, 100) + "..." : ai_insight_text);
                        }
                    } else {
                        // Log the full AI result to console for debugging
                        console.error("AI API response was not valid:", ai_result);
                        let errorDetail = "C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá.";
                        if (ai_result.error && ai_result.error.message) {
                            errorDetail = `L·ªói t·ª´ AI: ${ai_result.error.message}`;
                        } else if (JSON.stringify(ai_result).length > 2) {
                            errorDetail = `Ph·∫£n h·ªìi: ${JSON.stringify(ai_result).substring(0, 100)}...`;
                        }
                        ai_insight_text = `Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ AI. (${errorDetail})`;
                        ai_adjustment_percentage = 0;
                    }
                }

                // √Åp d·ª•ng ƒëi·ªÅu ch·ªânh t·ª´ AI v√†o l∆∞∆°ng d·ª± ƒëo√°n c∆° b·∫£n
                const final_predicted_salary = predicted_salary_ml_only * (1 + ai_adjustment_percentage);

                // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
                const displayData = {
                    ...inputData, // Gi·ªØ nguy√™n c√°c input ban ƒë·∫ßu
                    predicted_salary: final_predicted_salary,
                    predicted_salary_year: final_predicted_salary * 12,
                    ai_adjustment_percentage: ai_adjustment_percentage,
                    ai_insight_text: ai_insight_text
                };
                displayResult(displayData);

            } catch (error) {
                console.error("Error during prediction:", error); // Log detailed error
                displayError('L·ªói: ' + error.message);
            } finally {
                loadingDiv.classList.add('hidden'); // Always hide loading indicator
            }
        });
    </script>
</body>
</html>'''

    # T·∫°o th∆∞ m·ª•c 'templates' n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
    template_dir = 'templates'
    if not os.path.exists(template_dir):
        os.makedirs(template_dir)
        print(f"ƒê√£ t·∫°o th∆∞ m·ª•c: {template_dir}")

    # Ghi n·ªôi dung HTML v√†o file index.html trong th∆∞ m·ª•c 'templates'
    file_path = os.path.join(template_dir, 'index.html')
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    print(f"ƒê√£ t·∫°o file HTML template: {file_path}")

